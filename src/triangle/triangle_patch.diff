# HG changeset patch
# User Simon Kokkendorff <silyko@gmail.com>
# Date 1422373308 -3600
# Node ID 0e6dea64b3852f0f0b9c52f34f99f882903d4fc3
# Parent  c15e09ac529790e558650b0a4ad0ab41bedfc88e
tip

diff -r c15e09ac5297 -r 0e6dea64b385 triangle.c
--- a/triangle.c	Tue Jan 27 16:40:42 2015 +0100
+++ b/triangle.c	Tue Jan 27 16:41:48 2015 +0100
@@ -268,6 +268,7 @@
 
 /* #define CPU86 */
 /* #define LINUX */
+/* #define GCC_FPU_CONTROL */
 
 #define INEXACT /* Nothing */
 /* #define INEXACT volatile */
@@ -314,6 +315,13 @@
 
 #define VOID int
 
+/* Support "pointers as unsigned integers" on (typical) )64 bit platforms    */
+#ifdef POINTERS_ARE_VERY_LONG
+typedef unsigned long long PTR_AS_UINT;
+#else
+typedef unsigned long PTR_AS_UINT;
+#endif /* not POINTERS_ARE_VERY_LONG */
+
 /* Two constants for algorithms based on random sampling.  Both constants    */
 /*   have been chosen empirically to optimize their respective algorithms.   */
 
@@ -353,6 +361,10 @@
 #ifdef LINUX
 #include <fpu_control.h>
 #endif /* LINUX */
+#ifdef GCC_FPU_CONTROL
+#include <float.h>
+#endif /* GCC_FPU_CONTROL */
+
 #ifdef TRILIBRARY
 #include "triangle.h"
 #endif /* TRILIBRARY */
@@ -938,16 +950,16 @@
 /*   extracted from the two least significant bits of the pointer.           */
 
 #define decode(ptr, otri)                                                     \
-  (otri).orient = (int) ((unsigned long) (ptr) & (unsigned long) 3l);         \
+  (otri).orient = (int) ((PTR_AS_UINT) (ptr) & (PTR_AS_UINT) 3l);         \
   (otri).tri = (triangle *)                                                   \
-                  ((unsigned long) (ptr) ^ (unsigned long) (otri).orient)
+                  ((PTR_AS_UINT) (ptr) ^ (PTR_AS_UINT) (otri).orient)
 
 /* encode() compresses an oriented triangle into a single pointer.  It       */
 /*   relies on the assumption that all triangles are aligned to four-byte    */
 /*   boundaries, so the two least significant bits of (otri).tri are zero.   */
 
 #define encode(otri)                                                          \
-  (triangle) ((unsigned long) (otri).tri | (unsigned long) (otri).orient)
+  (triangle) ((PTR_AS_UINT) (otri).tri | (PTR_AS_UINT) (otri).orient)
 
 /* The following handle manipulation primitives are all described by Guibas  */
 /*   and Stolfi.  However, Guibas and Stolfi use an edge-based data          */
@@ -1111,16 +1123,16 @@
 
 #define infect(otri)                                                          \
   (otri).tri[6] = (triangle)                                                  \
-                    ((unsigned long) (otri).tri[6] | (unsigned long) 2l)
+                    ((PTR_AS_UINT) (otri).tri[6] | (PTR_AS_UINT) 2l)
 
 #define uninfect(otri)                                                        \
   (otri).tri[6] = (triangle)                                                  \
-                    ((unsigned long) (otri).tri[6] & ~ (unsigned long) 2l)
+                    ((PTR_AS_UINT) (otri).tri[6] & ~ (PTR_AS_UINT) 2l)
 
 /* Test a triangle for viral infection.                                      */
 
 #define infected(otri)                                                        \
-  (((unsigned long) (otri).tri[6] & (unsigned long) 2l) != 0l)
+  (((PTR_AS_UINT) (otri).tri[6] & (PTR_AS_UINT) 2l) != 0l)
 
 /* Check or set a triangle's attributes.                                     */
 
@@ -1158,16 +1170,16 @@
 /*   are masked out to produce the real pointer.                             */
 
 #define sdecode(sptr, osub)                                                   \
-  (osub).ssorient = (int) ((unsigned long) (sptr) & (unsigned long) 1l);      \
+  (osub).ssorient = (int) ((PTR_AS_UINT) (sptr) & (PTR_AS_UINT) 1l);      \
   (osub).ss = (subseg *)                                                      \
-              ((unsigned long) (sptr) & ~ (unsigned long) 3l)
+              ((PTR_AS_UINT) (sptr) & ~ (PTR_AS_UINT) 3l)
 
 /* sencode() compresses an oriented subsegment into a single pointer.  It    */
 /*   relies on the assumption that all subsegments are aligned to two-byte   */
 /*   boundaries, so the least significant bit of (osub).ss is zero.          */
 
 #define sencode(osub)                                                         \
-  (subseg) ((unsigned long) (osub).ss | (unsigned long) (osub).ssorient)
+  (subseg) ((PTR_AS_UINT) (osub).ss | (PTR_AS_UINT) (osub).ssorient)
 
 /* ssym() toggles the orientation of a subsegment.                           */
 
@@ -3675,27 +3687,27 @@
   struct osub printsh;
   vertex printvertex;
 
-  printf("triangle x%lx with orientation %d:\n", (unsigned long) t->tri,
+  printf("triangle %p with orientation %d:\n", (void *) t->tri,
          t->orient);
   decode(t->tri[0], printtri);
   if (printtri.tri == m->dummytri) {
     printf("    [0] = Outer space\n");
   } else {
-    printf("    [0] = x%lx  %d\n", (unsigned long) printtri.tri,
+    printf("    [0] = %p  %d\n", (void *) printtri.tri,
            printtri.orient);
   }
   decode(t->tri[1], printtri);
   if (printtri.tri == m->dummytri) {
     printf("    [1] = Outer space\n");
   } else {
-    printf("    [1] = x%lx  %d\n", (unsigned long) printtri.tri,
+    printf("    [1] = %p  %d\n", (void *) printtri.tri,
            printtri.orient);
   }
   decode(t->tri[2], printtri);
   if (printtri.tri == m->dummytri) {
     printf("    [2] = Outer space\n");
   } else {
-    printf("    [2] = x%lx  %d\n", (unsigned long) printtri.tri,
+    printf("    [2] = %p  %d\n", (void *) printtri.tri,
            printtri.orient);
   }
 
@@ -3703,38 +3715,38 @@
   if (printvertex == (vertex) NULL)
     printf("    Origin[%d] = NULL\n", (t->orient + 1) % 3 + 3);
   else
-    printf("    Origin[%d] = x%lx  (%.12g, %.12g)\n",
-           (t->orient + 1) % 3 + 3, (unsigned long) printvertex,
+    printf("    Origin[%d] = %p  (%.12g, %.12g)\n",
+           (t->orient + 1) % 3 + 3, (void *) printvertex,
            printvertex[0], printvertex[1]);
   dest(*t, printvertex);
   if (printvertex == (vertex) NULL)
     printf("    Dest  [%d] = NULL\n", (t->orient + 2) % 3 + 3);
   else
-    printf("    Dest  [%d] = x%lx  (%.12g, %.12g)\n",
-           (t->orient + 2) % 3 + 3, (unsigned long) printvertex,
+    printf("    Dest  [%d] = %p  (%.12g, %.12g)\n",
+           (t->orient + 2) % 3 + 3, (void *) printvertex,
            printvertex[0], printvertex[1]);
   apex(*t, printvertex);
   if (printvertex == (vertex) NULL)
     printf("    Apex  [%d] = NULL\n", t->orient + 3);
   else
-    printf("    Apex  [%d] = x%lx  (%.12g, %.12g)\n",
-           t->orient + 3, (unsigned long) printvertex,
+    printf("    Apex  [%d] = %p  (%.12g, %.12g)\n",
+           t->orient + 3, (void *) printvertex,
            printvertex[0], printvertex[1]);
 
   if (b->usesegments) {
     sdecode(t->tri[6], printsh);
     if (printsh.ss != m->dummysub) {
-      printf("    [6] = x%lx  %d\n", (unsigned long) printsh.ss,
+      printf("    [6] = %p  %d\n", (void *) printsh.ss,
              printsh.ssorient);
     }
     sdecode(t->tri[7], printsh);
     if (printsh.ss != m->dummysub) {
-      printf("    [7] = x%lx  %d\n", (unsigned long) printsh.ss,
+      printf("    [7] = %p  %d\n", (void *) printsh.ss,
              printsh.ssorient);
     }
     sdecode(t->tri[8], printsh);
     if (printsh.ss != m->dummysub) {
-      printf("    [8] = x%lx  %d\n", (unsigned long) printsh.ss,
+      printf("    [8] = %p  %d\n", (void *) printsh.ss,
              printsh.ssorient);
     }
   }
@@ -3769,20 +3781,20 @@
   struct otri printtri;
   vertex printvertex;
 
-  printf("subsegment x%lx with orientation %d and mark %d:\n",
-         (unsigned long) s->ss, s->ssorient, mark(*s));
+  printf("subsegment %p with orientation %d and mark %d:\n",
+         (void *) s->ss, s->ssorient, mark(*s));
   sdecode(s->ss[0], printsh);
   if (printsh.ss == m->dummysub) {
     printf("    [0] = No subsegment\n");
   } else {
-    printf("    [0] = x%lx  %d\n", (unsigned long) printsh.ss,
+    printf("    [0] = %p  %d\n", (void *) printsh.ss,
            printsh.ssorient);
   }
   sdecode(s->ss[1], printsh);
   if (printsh.ss == m->dummysub) {
     printf("    [1] = No subsegment\n");
   } else {
-    printf("    [1] = x%lx  %d\n", (unsigned long) printsh.ss,
+    printf("    [1] = %p  %d\n", (void *) printsh.ss,
            printsh.ssorient);
   }
 
@@ -3790,29 +3802,29 @@
   if (printvertex == (vertex) NULL)
     printf("    Origin[%d] = NULL\n", 2 + s->ssorient);
   else
-    printf("    Origin[%d] = x%lx  (%.12g, %.12g)\n",
-           2 + s->ssorient, (unsigned long) printvertex,
+    printf("    Origin[%d] = %p  (%.12g, %.12g)\n",
+           2 + s->ssorient, (void *) printvertex,
            printvertex[0], printvertex[1]);
   sdest(*s, printvertex);
   if (printvertex == (vertex) NULL)
     printf("    Dest  [%d] = NULL\n", 3 - s->ssorient);
   else
-    printf("    Dest  [%d] = x%lx  (%.12g, %.12g)\n",
-           3 - s->ssorient, (unsigned long) printvertex,
+    printf("    Dest  [%d] = %p  (%.12g, %.12g)\n",
+           3 - s->ssorient, (void *) printvertex,
            printvertex[0], printvertex[1]);
 
   decode(s->ss[6], printtri);
   if (printtri.tri == m->dummytri) {
     printf("    [6] = Outer space\n");
   } else {
-    printf("    [6] = x%lx  %d\n", (unsigned long) printtri.tri,
+    printf("    [6] = %p  %d\n", (void *) printtri.tri,
            printtri.orient);
   }
   decode(s->ss[7], printtri);
   if (printtri.tri == m->dummytri) {
     printf("    [7] = Outer space\n");
   } else {
-    printf("    [7] = x%lx  %d\n", (unsigned long) printtri.tri,
+    printf("    [7] = %p  %d\n", (void *) printtri.tri,
            printtri.orient);
   }
 
@@ -3820,15 +3832,15 @@
   if (printvertex == (vertex) NULL)
     printf("    Segment origin[%d] = NULL\n", 4 + s->ssorient);
   else
-    printf("    Segment origin[%d] = x%lx  (%.12g, %.12g)\n",
-           4 + s->ssorient, (unsigned long) printvertex,
+    printf("    Segment origin[%d] = %p  (%.12g, %.12g)\n",
+           4 + s->ssorient, (void *) printvertex,
            printvertex[0], printvertex[1]);
   segdest(*s, printvertex);
   if (printvertex == (vertex) NULL)
     printf("    Segment dest  [%d] = NULL\n", 5 - s->ssorient);
   else
-    printf("    Segment dest  [%d] = x%lx  (%.12g, %.12g)\n",
-           5 - s->ssorient, (unsigned long) printvertex,
+    printf("    Segment dest  [%d] = %p  (%.12g, %.12g)\n",
+           5 - s->ssorient, (void *) printvertex,
            printvertex[0], printvertex[1]);
 }
 
@@ -3891,7 +3903,7 @@
 #endif /* not ANSI_DECLARATORS */
 
 {
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
 
   pool->items = 0;
   pool->maxitems = 0;
@@ -3899,11 +3911,11 @@
   /* Set the currently active block. */
   pool->nowblock = pool->firstblock;
   /* Find the first item in the pool.  Increment by the size of (VOID *). */
-  alignptr = (unsigned long) (pool->nowblock + 1);
+  alignptr = (PTR_AS_UINT) (pool->nowblock + 1);
   /* Align the item on an `alignbytes'-byte boundary. */
   pool->nextitem = (VOID *)
-    (alignptr + (unsigned long) pool->alignbytes -
-     (alignptr % (unsigned long) pool->alignbytes));
+    (alignptr + (PTR_AS_UINT) pool->alignbytes -
+     (alignptr % (PTR_AS_UINT) pool->alignbytes));
   /* There are lots of unallocated items left in this block. */
   pool->unallocateditems = pool->itemsfirstblock;
   /* The stack of deallocated items is empty. */
@@ -4008,7 +4020,7 @@
 {
   VOID *newitem;
   VOID **newblock;
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
 
   /* First check the linked list of dead items.  If the list is not   */
   /*   empty, allocate an item from the list rather than a fresh one. */
@@ -4033,11 +4045,11 @@
       pool->nowblock = (VOID **) *(pool->nowblock);
       /* Find the first item in the block.    */
       /*   Increment by the size of (VOID *). */
-      alignptr = (unsigned long) (pool->nowblock + 1);
+      alignptr = (PTR_AS_UINT) (pool->nowblock + 1);
       /* Align the item on an `alignbytes'-byte boundary. */
       pool->nextitem = (VOID *)
-        (alignptr + (unsigned long) pool->alignbytes -
-         (alignptr % (unsigned long) pool->alignbytes));
+        (alignptr + (PTR_AS_UINT) pool->alignbytes -
+         (alignptr % (PTR_AS_UINT) pool->alignbytes));
       /* There are lots of unallocated items left in this block. */
       pool->unallocateditems = pool->itemsperblock;
     }
@@ -4092,16 +4104,16 @@
 #endif /* not ANSI_DECLARATORS */
 
 {
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
 
   /* Begin the traversal in the first block. */
   pool->pathblock = pool->firstblock;
   /* Find the first item in the block.  Increment by the size of (VOID *). */
-  alignptr = (unsigned long) (pool->pathblock + 1);
+  alignptr = (PTR_AS_UINT) (pool->pathblock + 1);
   /* Align with item on an `alignbytes'-byte boundary. */
   pool->pathitem = (VOID *)
-    (alignptr + (unsigned long) pool->alignbytes -
-     (alignptr % (unsigned long) pool->alignbytes));
+    (alignptr + (PTR_AS_UINT) pool->alignbytes -
+     (alignptr % (PTR_AS_UINT) pool->alignbytes));
   /* Set the number of items left in the current block. */
   pool->pathitemsleft = pool->itemsfirstblock;
 }
@@ -4129,7 +4141,7 @@
 
 {
   VOID *newitem;
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
 
   /* Stop upon exhausting the list of items. */
   if (pool->pathitem == pool->nextitem) {
@@ -4141,11 +4153,11 @@
     /* Find the next block. */
     pool->pathblock = (VOID **) *(pool->pathblock);
     /* Find the first item in the block.  Increment by the size of (VOID *). */
-    alignptr = (unsigned long) (pool->pathblock + 1);
+    alignptr = (PTR_AS_UINT) (pool->pathblock + 1);
     /* Align with item on an `alignbytes'-byte boundary. */
     pool->pathitem = (VOID *)
-      (alignptr + (unsigned long) pool->alignbytes -
-       (alignptr % (unsigned long) pool->alignbytes));
+      (alignptr + (PTR_AS_UINT) pool->alignbytes -
+       (alignptr % (PTR_AS_UINT) pool->alignbytes));
     /* Set the number of items left in the current block. */
     pool->pathitemsleft = pool->itemsperblock;
   }
@@ -4197,16 +4209,16 @@
 #endif /* not ANSI_DECLARATORS */
 
 {
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
 
   /* Set up `dummytri', the `triangle' that occupies "outer space." */
   m->dummytribase = (triangle *) trimalloc(trianglebytes +
                                            m->triangles.alignbytes);
   /* Align `dummytri' on a `triangles.alignbytes'-byte boundary. */
-  alignptr = (unsigned long) m->dummytribase;
+  alignptr = (PTR_AS_UINT) m->dummytribase;
   m->dummytri = (triangle *)
-    (alignptr + (unsigned long) m->triangles.alignbytes -
-     (alignptr % (unsigned long) m->triangles.alignbytes));
+    (alignptr + (PTR_AS_UINT) m->triangles.alignbytes -
+     (alignptr % (PTR_AS_UINT) m->triangles.alignbytes));
   /* Initialize the three adjoining triangles to be "outer space."  These  */
   /*   will eventually be changed by various bonding operations, but their */
   /*   values don't really matter, as long as they can legally be          */
@@ -4226,10 +4238,10 @@
     m->dummysubbase = (subseg *) trimalloc(subsegbytes +
                                            m->subsegs.alignbytes);
     /* Align `dummysub' on a `subsegs.alignbytes'-byte boundary. */
-    alignptr = (unsigned long) m->dummysubbase;
+    alignptr = (PTR_AS_UINT) m->dummysubbase;
     m->dummysub = (subseg *)
-      (alignptr + (unsigned long) m->subsegs.alignbytes -
-       (alignptr % (unsigned long) m->subsegs.alignbytes));
+      (alignptr + (PTR_AS_UINT) m->subsegs.alignbytes -
+       (alignptr % (PTR_AS_UINT) m->subsegs.alignbytes));
     /* Initialize the two adjoining subsegments to be the omnipresent      */
     /*   subsegment.  These will eventually be changed by various bonding  */
     /*   operations, but their values don't really matter, as long as they */
@@ -4586,7 +4598,7 @@
 {
   VOID **getblock;
   char *foundvertex;
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
   int current;
 
   getblock = m->vertices.firstblock;
@@ -4603,9 +4615,9 @@
   }
 
   /* Now find the right vertex. */
-  alignptr = (unsigned long) (getblock + 1);
-  foundvertex = (char *) (alignptr + (unsigned long) m->vertices.alignbytes -
-                          (alignptr % (unsigned long) m->vertices.alignbytes));
+  alignptr = (PTR_AS_UINT) (getblock + 1);
+  foundvertex = (char *) (alignptr + (PTR_AS_UINT) m->vertices.alignbytes -
+                          (alignptr % (PTR_AS_UINT) m->vertices.alignbytes));
   return (vertex) (foundvertex + m->vertices.itembytes * (number - current));
 }
 
@@ -4883,6 +4895,15 @@
 /*                                                                           */
 /*****************************************************************************/
 
+#ifdef GCC_FPU_CONTROL
+/* cf URL http://www.cs.cmu.edu/~quake/robust.pc.html */
+void set_ctrlword(v)
+int v;
+{
+  asm("fldcw %0" :: "m" (v));
+}
+#endif /* GCC_FPU_CONTROL */
+
 void exactinit()
 {
   REAL half;
@@ -4909,6 +4930,13 @@
 #endif /* not SINGLE */
   _FPU_SETCW(cword);
 #endif /* LINUX */
+#ifdef GCC_FPU_CONTROL
+#ifdef SINGLE
+  set_ctrlword(4210);           /* set FPU control word for single precision */
+#else /* not SINGLE */
+  set_ctrlword(4722);           /* set FPU control word for double precision */
+#endif /* not SINGLE */
+#endif /* GCC_FPU_CONTROL */
 
   every_other = 1;
   half = 0.5;
@@ -7649,7 +7677,7 @@
   char *firsttri;
   struct otri sampletri;
   vertex torg, tdest;
-  unsigned long alignptr;
+  PTR_AS_UINT alignptr;
   REAL searchdist, dist;
   REAL ahead;
   long samplesperblock, totalsamplesleft, samplesleft;
@@ -7721,11 +7749,11 @@
       population = totalpopulation;
     }
     /* Find a pointer to the first triangle in the block. */
-    alignptr = (unsigned long) (sampleblock + 1);
+    alignptr = (PTR_AS_UINT) (sampleblock + 1);
     firsttri = (char *) (alignptr +
-                         (unsigned long) m->triangles.alignbytes -
+                         (PTR_AS_UINT) m->triangles.alignbytes -
                          (alignptr %
-                          (unsigned long) m->triangles.alignbytes));
+                          (PTR_AS_UINT) m->triangles.alignbytes));
 
     /* Choose `samplesleft' randomly sampled triangles in this block. */
     do {
@@ -13882,6 +13910,162 @@
 /*                                                                           */
 /*****************************************************************************/
 
+#ifdef INPUT_NODE_AS_BINARY
+#include <fcntl.h>
+#include <io.h>
+
+
+#ifdef ANSI_DECLARATORS
+void readnodes(struct mesh *m, struct behavior *b, char *nodefilename,
+               char *polyfilename, FILE **polyfile)
+#else /* not ANSI_DECLARATORS */
+void readnodes(m, b, nodefilename, polyfilename, polyfile)
+struct mesh *m;
+struct behavior *b;
+char *nodefilename;
+char *polyfilename;
+FILE **polyfile;
+#endif /* not ANSI_DECLARATORS */
+
+{
+  FILE *infile;
+  vertex vertexloop;
+  char *infilename;
+  REAL x, y;
+  int nodemarkers;
+  int i;
+  
+  PTR_AS_UINT ibuf;
+  double fbuf;
+  char *lastchar;
+
+  /* avoid compiler warnings about unused parameters */
+  (void) polyfilename;
+  
+  if (b->poly) {
+    printf("  Error:  Cannot read poly files in binary mode.\n");
+    triexit(1);
+  }
+
+  /* Read the vertices from a .node file. */
+  m->readnodefile = 1;
+  infilename = nodefilename;
+  *polyfile = (FILE *) NULL;
+
+  
+  if (0==strstr (infilename, "filter.node")) {
+    /* semi ugly hack for changing binary .node extension to .nodb */
+    lastchar = infilename + strlen(infilename)-1;
+    if ('e' != *lastchar) {
+      printf("  Error:  bad .node file name - %s.\n", infilename);
+      triexit(1);
+    }
+    *lastchar = 'b';
+
+  
+    if (!b->quiet)
+      printf("Opening %s.\n", nodefilename);
+
+    infile = fopen(nodefilename, "rb");
+    if (infile == (FILE *) NULL) {
+      printf("  Error:  Cannot access file %s.\n", nodefilename);
+      triexit(1);
+    }
+    *lastchar = 'e';
+  } else {
+      _setmode (_fileno(stdin), _O_BINARY);
+      infile = stdin;
+  }
+  
+  
+  /* Read number of vertices, number of dimensions, number of vertex */
+  /*   attributes, and number of boundary markers.                   */
+  fread (&ibuf, sizeof (PTR_AS_UINT), 1, infile);
+  m->invertices =   ibuf;
+  m->mesh_dim   =   2;
+  m->nextras    =   0;
+  nodemarkers   =   0;
+  if (m->invertices < 3) {
+    printf("Error:  Input must have at least three input vertices.\n");
+    triexit(1);
+  }
+  if (m->mesh_dim != 2) {
+    printf("Error:  Triangle only works with two-dimensional meshes.\n");
+    triexit(1);
+  }
+  if (m->nextras == 0) {
+    b->weighted = 0;
+  }
+
+  initializevertexpool(m, b);
+  b->firstnumber = 0;
+
+  /* Read the vertices. */
+  for (i = 0; i < m->invertices; i++) {
+    vertexloop = (vertex) poolalloc(&m->vertices);
+    
+    fread (&fbuf, sizeof (double), 1, infile);
+    x = fbuf;
+    fread (&fbuf, sizeof (double), 1, infile);
+    y = fbuf;
+    vertexloop[0] = x;
+    vertexloop[1] = y;
+   
+    /* Nodemarkers default to zero. */
+    setvertexmark(vertexloop, 0);
+    
+    setvertextype(vertexloop, INPUTVERTEX);
+    
+    /* Determine the smallest and largest x and y coordinates. */
+    if (i == 0) {
+      m->xmin = m->xmax = x;
+      m->ymin = m->ymax = y;
+    } else {
+      m->xmin = (x < m->xmin) ? x : m->xmin;
+      m->xmax = (x > m->xmax) ? x : m->xmax;
+      m->ymin = (y < m->ymin) ? y : m->ymin;
+      m->ymax = (y > m->ymax) ? y : m->ymax;
+    }
+  }
+  
+  if (m->readnodefile && (stdin!=infile)) {
+    fclose(infile);
+  }
+
+  /* Nonexistent x value used as a flag to mark circle events in sweepline */
+  /*   Delaunay algorithm.                                                 */
+  m->xminextreme = 10 * m->xmin - 9 * m->xmax;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+#else /* not INPUT_NODE_AS_BINARY */
+
+
 #ifndef TRILIBRARY
 
 #ifdef ANSI_DECLARATORS
@@ -14072,6 +14256,8 @@
 }
 
 #endif /* not TRILIBRARY */
+#endif /* not INPUT_NODE_AS_BINARY */
+
 
 /*****************************************************************************/
 /*                                                                           */
@@ -14489,6 +14675,92 @@
 /*                                                                           */
 /*****************************************************************************/
 
+#ifdef OUTPUT_ELE_AS_BINARY
+#ifdef ANSI_DECLARATORS
+void writeelements(struct mesh *m, struct behavior *b, char *elefilename,
+                   int argc, char **argv)
+#else /* not ANSI_DECLARATORS */
+void writeelements(m, b, elefilename, argc, argv)
+struct mesh *m;
+struct behavior *b;
+char *elefilename;
+int argc;
+char **argv;
+#endif /* not ANSI_DECLARATORS */
+
+
+{
+  FILE *outfile;
+  struct otri triangleloop;
+  vertex p1, p2, p3;
+  long elementnumber;
+  char *lastchar;
+  PTR_AS_UINT buf;
+
+  /* avoid compiler warnings about unused parameters */
+  (void) argc;
+  (void) argv;
+  
+  if (b->order != 1) {
+    printf("  Error:  Cannot create binary ele for b->order!=1.\n");
+    triexit(1);
+  }
+
+  /* semi ugly hack for changing binary .ele extension to .elb */
+  lastchar = elefilename + strlen(elefilename)-1;
+  if ('e' != *lastchar) {
+    printf("  Error:  .ele file name may be corrupted.\n");
+    triexit(1);
+  }
+  *lastchar = 'b';
+  if (!b->quiet) {
+    printf("Writing %s.\n", elefilename);
+  }
+  outfile = fopen(elefilename, "wb");
+  
+  if (outfile == (FILE *) NULL) {
+    printf("  Error:  Cannot create file %s.\n", elefilename);
+    triexit(1);
+  }
+  *lastchar = 'e';
+
+
+  /* Number of triangles, vertices per triangle, attributes per triangle. */
+  /* (the latter two are trivial, but makes output from 'od -t u8 -w24'   */
+  /* much easier to parse, since header and records all are 3 items)      */
+  buf = m->triangles.items;
+  fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+  buf = 3;
+  fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+  buf = 0;
+  fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+
+  traversalinit(&m->triangles);
+  triangleloop.tri = triangletraverse(m);
+  triangleloop.orient = 0;
+  elementnumber = b->firstnumber;
+  while (triangleloop.tri != (triangle *) NULL) {
+    org(triangleloop, p1);
+    dest(triangleloop, p2);
+    apex(triangleloop, p3);
+
+    /* Indices for three vertices. */
+    /*buf = elementnumber;
+    fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);*/
+    buf = vertexmark(p1);
+    fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+    buf = vertexmark(p2);
+    fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+    buf = vertexmark(p3);
+    fwrite (&buf, sizeof (PTR_AS_UINT), 1, outfile);
+
+    triangleloop.tri = triangletraverse(m);
+    elementnumber++;
+  }
+  fclose (outfile);
+}
+#else /* not OUTPUT_ELE_AS_BINARY */
+
 #ifdef TRILIBRARY
 
 #ifdef ANSI_DECLARATORS
@@ -14623,6 +14895,13 @@
   finishfile(outfile, argc, argv);
 #endif /* not TRILIBRARY */
 }
+#endif /* not OUTPUT_ELE_AS_BINARY */
+
+
+
+
+
+
 
 /*****************************************************************************/
 /*                                                                           */
